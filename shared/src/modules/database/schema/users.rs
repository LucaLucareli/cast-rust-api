//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password_hash: String,
    pub name: String,
    pub role: String,
    pub profile_picture_url: Option<String>,
    pub subscription_status: Option<String>,
    pub subscription_expires_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::favorites::Entity")]
    Favorites,
    #[sea_orm(has_many = "super::ratings::Entity")]
    Ratings,
    #[sea_orm(has_many = "super::users_access_groups::Entity")]
    UsersAccessGroups,
    #[sea_orm(has_many = "super::watch_history::Entity")]
    WatchHistory,
}

impl Related<super::favorites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Favorites.def()
    }
}

impl Related<super::ratings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ratings.def()
    }
}

impl Related<super::users_access_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersAccessGroups.def()
    }
}

impl Related<super::watch_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WatchHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
