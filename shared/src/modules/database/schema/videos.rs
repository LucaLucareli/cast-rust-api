//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "videos")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub description: Option<String>,
    pub duration_seconds: i32,
    pub video_url: Option<String>,
    pub trailer_url: Option<String>,
    pub is_available: bool,
    #[sea_orm(column_type = "Double")]
    pub rating: f64,
    pub series_id: Option<i32>,
    pub episode_number: Option<i32>,
    pub season_number: Option<i32>,
    pub release_year: Option<i32>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::favorites::Entity")]
    Favorites,
    #[sea_orm(has_many = "super::ratings::Entity")]
    Ratings,
    #[sea_orm(
        belongs_to = "super::series::Entity",
        from = "Column::SeriesId",
        to = "super::series::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Series,
    #[sea_orm(has_many = "super::video_actors::Entity")]
    VideoActors,
    #[sea_orm(has_many = "super::video_categories::Entity")]
    VideoCategories,
    #[sea_orm(has_many = "super::video_directors::Entity")]
    VideoDirectors,
    #[sea_orm(has_many = "super::watch_history::Entity")]
    WatchHistory,
}

impl Related<super::favorites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Favorites.def()
    }
}

impl Related<super::ratings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ratings.def()
    }
}

impl Related<super::series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Series.def()
    }
}

impl Related<super::video_actors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VideoActors.def()
    }
}

impl Related<super::video_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VideoCategories.def()
    }
}

impl Related<super::video_directors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VideoDirectors.def()
    }
}

impl Related<super::watch_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WatchHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
