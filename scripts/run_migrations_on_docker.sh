#!/bin/bash

# Este script orquestra a execu√ß√£o das migra√ß√µes DENTRO do cont√™iner Docker do SQL Server.
# Ele roda no seu host, mas transfere os arquivos e executa o processo no cont√™iner.

set -e  # Para o script se qualquer comando falhar

# Nome do cont√™iner SQL Server, conforme visto no 'docker ps'
CONTAINER_NAME="rust-cast-sql-sever"

# Caminho da pasta de migra√ß√µes e do .env no SEU HOST
HOST_MIGRATIONS_DIR="./migrations"
HOST_ENV_FILE=".env"
# Este √© o script que ser√° COPIADO e EXECUTADO dentro do Docker.
# Certifique-se de que ele exista na raiz do seu projeto e esteja atualizado (veja o Passo 2).
HOST_INTERNAL_RUN_SCRIPT="./run_migrations_internal.sh"

# --- Verifica√ß√µes Iniciais no Host ---

echo "üîç Verificando pr√©-requisitos..."

if [ ! -f "$HOST_ENV_FILE" ]; then
    echo "‚ùå Erro: Arquivo .env n√£o encontrado no host em '$HOST_ENV_FILE'."
    echo "Crie-o com as vari√°veis de ambiente necess√°rias para a conex√£o do SQL Server (DB_USER, DB_PASSWORD, DB_NAME)."
    exit 1
fi

if [ ! -d "$HOST_MIGRATIONS_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio de migra√ß√µes '$HOST_MIGRATIONS_DIR' n√£o encontrado no host."
    echo "Certifique-se de que a pasta 'migrations' existe e cont√©m seus arquivos .sql."
    exit 1
fi

if [ ! -f "$HOST_INTERNAL_RUN_SCRIPT" ]; then
    echo "‚ùå Erro: Script interno de execu√ß√£o de migra√ß√µes '$HOST_INTERNAL_RUN_SCRIPT' n√£o encontrado no host."
    echo "Crie o arquivo '$HOST_INTERNAL_RUN_SCRIPT' conforme as instru√ß√µes do Passo 2."
    exit 1
fi

echo "‚úÖ Todos os pr√©-requisitos verificados com sucesso!"

# --- Verifica√ß√£o do Docker ---

echo "üê≥ Verificando se o Docker est√° rodando..."
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Erro: Docker n√£o est√° rodando ou n√£o est√° acess√≠vel."
    echo "Inicie o Docker e tente novamente."
    exit 1
fi

# --- Verifica√ß√£o e Status do Cont√™iner ---

echo "üîç Verificando o status do cont√™iner '$CONTAINER_NAME'..."

# Verifica se o cont√™iner existe
if ! docker ps -a --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "‚ùå Erro: Cont√™iner '$CONTAINER_NAME' n√£o encontrado."
    echo "Verifique se o docker-compose est√° rodando ou se o nome do cont√™iner est√° correto."
    exit 1
fi

# Verifica se o cont√™iner est√° rodando
if ! docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "‚ùå Erro: Cont√™iner '$CONTAINER_NAME' n√£o est√° rodando."
    echo "Inicie o cont√™iner com 'docker-compose up -d' ou 'docker start $CONTAINER_NAME'"
    exit 1
fi

# Espera at√© que o cont√™iner esteja "healthy" (saud√°vel) ou atinja o tempo limite
echo "‚è≥ Aguardando o cont√™iner ficar saud√°vel..."
for i in $(seq 1 12); do # Tenta por at√© 12 * 5 segundos = 60 segundos
    CONTAINER_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo "not_found")
    
    case "$CONTAINER_HEALTH" in
        "healthy")
            echo "‚úÖ Cont√™iner '$CONTAINER_NAME' est√° saud√°vel."
            break
            ;;
        "starting")
            echo "‚è≥ Cont√™iner '$CONTAINER_NAME' est√° iniciando. Aguardando ($i/12)..."
            ;;
        "unhealthy")
            echo "‚ö†Ô∏è  Cont√™iner '$CONTAINER_NAME' est√° com problemas de sa√∫de."
            echo "Verifique os logs com 'docker logs $CONTAINER_NAME'"
            ;;
        "not_found")
            echo "‚ùå Erro: Cont√™iner '$CONTAINER_NAME' n√£o encontrado. Verifique se ele est√° rodando com 'docker ps'."
            exit 1
            ;;
        *)
            echo "‚ö†Ô∏è  Cont√™iner '$CONTAINER_NAME' em estado inesperado: '$CONTAINER_HEALTH'."
            echo "Tentando prosseguir, mas pode haver falhas."
            break
            ;;
    esac
    
    if [ $i -eq 12 ]; then
        echo "‚ö†Ô∏è  Aviso: O cont√™iner '$CONTAINER_NAME' n√£o atingiu o estado 'healthy' em 60 segundos."
        echo "Conex√µes podem falhar, mas tentaremos prosseguir."
    fi
    
    sleep 5
done

# --- Prepara√ß√£o e Execu√ß√£o no Cont√™iner ---

echo "üöÄ Copiando arquivos de migra√ß√£o para o cont√™iner '$CONTAINER_NAME'..."

# Caminho tempor√°rio dentro do cont√™iner para os arquivos de migra√ß√£o e o script
CONTAINER_TEMP_MIGRATIONS_PATH="/tmp/migration_setup"

# Cria o diret√≥rio tempor√°rio no cont√™iner
docker exec "$CONTAINER_NAME" mkdir -p "$CONTAINER_TEMP_MIGRATIONS_PATH"

# Copia os arquivos e pastas do host para dentro do cont√™iner
echo "üìÅ Copiando arquivos..."
docker cp "$HOST_ENV_FILE" "$CONTAINER_NAME":"$CONTAINER_TEMP_MIGRATIONS_PATH/.env"
docker cp "$HOST_INTERNAL_RUN_SCRIPT" "$CONTAINER_NAME":"$CONTAINER_TEMP_MIGRATIONS_PATH/run_migrations_internal.sh"
docker cp "$HOST_MIGRATIONS_DIR" "$CONTAINER_NAME":"$CONTAINER_TEMP_MIGRATIONS_PATH/migrations"

echo "‚úÖ Arquivos copiados com sucesso para '$CONTAINER_TEMP_MIGRATIONS_PATH' no cont√™iner."

echo "‚öôÔ∏è  Executando o script de migra√ß√£o DENTRO do cont√™iner..."

# Executa o script de migra√ß√£o dentro do cont√™iner
# O script interno (run_migrations_internal.sh) ser√° respons√°vel por carregar o .env e usar o sqlcmd
docker exec "$CONTAINER_NAME" bash -c "chmod +x $CONTAINER_TEMP_MIGRATIONS_PATH/run_migrations_internal.sh && $CONTAINER_TEMP_MIGRATIONS_PATH/run_migrations_internal.sh"

EXECUTION_STATUS=$? # Captura o c√≥digo de sa√≠da do comando docker exec

if [ $EXECUTION_STATUS -eq 0 ]; then
    echo "üéâ Migra√ß√µes conclu√≠das com sucesso no SQL Server do Docker!"
else
    echo "‚ùå Erro ao executar migra√ß√µes no cont√™iner. Verifique os logs acima para detalhes."
fi

# Opcional: Limpeza dos arquivos tempor√°rios no cont√™iner ap√≥s a execu√ß√£o
echo "üßπ Limpando arquivos tempor√°rios no cont√™iner..."
docker exec "$CONTAINER_NAME" rm -rf "$CONTAINER_TEMP_MIGRATIONS_PATH"
echo "‚úÖ Limpeza conclu√≠da."

exit $EXECUTION_STATUS